---
description: 
globs: 
alwaysApply: false
---
# パターンライブラリ管理

## 🎯 パターン分類

### 1. アーキテクチャパターン
- **MVC/MVP/MVVM**: 画面設計パターン
- **Repository**: データアクセス抽象化
- **Factory**: オブジェクト生成パターン
- **Observer**: イベント駆動パターン

### 2. 実装パターン
- **API呼び出し**: HTTP通信の標準化
- **エラーハンドリング**: 例外処理の統一
- **ログ出力**: ログレベルと形式の統一
- **バリデーション**: 入力検証の標準化

### 3. テストパターン
- **単体テスト**: テストケース作成パターン
- **統合テスト**: システム間連携テスト
- **E2Eテスト**: エンドツーエンドテスト
- **モック**: テストダブル活用パターン

## 📝 パターン記録形式

### 標準テンプレート
```markdown
## パターン名: [具体的な名前]

### 目的
- **解決する問題**: 
- **適用場面**: 
- **期待効果**: 

### 実装例
```[言語]
// コード例
```

### 使用上の注意
- **制約事項**: 
- **パフォーマンス影響**: 
- **メンテナンス性**: 

### 関連パターン
- **組み合わせ可能**: 
- **代替パターン**: 
```

## 🔄 パターン活用フロー

### 新規実装時
1. **要件分析**: 実装したい機能の要件を整理
2. **パターン検索**: @.cursor/patterns.md で類似パターンを検索
3. **パターン選択**: 最適なパターンを選択・カスタマイズ
4. **実装・テスト**: パターンに基づいて実装
5. **フィードバック**: パターンの改善点を記録

### パターン更新時
1. **問題発見**: 既存パターンの問題点を特定
2. **改善案作成**: より良いパターンを設計
3. **影響範囲確認**: 既存コードへの影響を評価
4. **段階的更新**: 安全にパターンを更新
5. **知識共有**: 改善内容をチームに共有

## 📊 品質指標

### パターン品質
- **再利用率**: 高い再利用を目標
- **バグ発生率**: 削減を目標
- **開発速度**: 向上を目標

### メンテナンス性
- **コード重複**: 削減を目標
- **修正工数**: 削減を目標
- **新人習得時間**: 短縮を目標

## 🚀 活用例

### API呼び出しパターン
```typescript
// 標準的なAPI呼び出しパターン
const apiCall = async (endpoint: string, options?: RequestInit) => {
  try {
    const response = await fetch(endpoint, {
      ...defaultOptions,
      ...options
    });
    
    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('API呼び出しエラー:', error);
    throw error;
  }
};
```

### エラーハンドリングパターン
```typescript
// 統一されたエラーハンドリング
class AppError extends Error {
  constructor(
    message: string,
    public code: string,
    public statusCode: number = 500
  ) {
    super(message);
    this.name = 'AppError';
  }
}

const handleError = (error: unknown) => {
  if (error instanceof AppError) {
    // アプリケーション固有のエラー処理
    console.error(`[${error.code}] ${error.message}`);
  } else {
    // 予期しないエラー処理
    console.error('予期しないエラー:', error);
  }
};
```


