---
description: 
globs: 
alwaysApply: false
---
# チーム開発標準

## 📋 コーディング規約

### 1. 命名規則
- **変数・関数**: camelCase (例: `getUserData`, `isValid`)
- **クラス・コンポーネント**: PascalCase (例: `UserService`, `LoginForm`)
- **定数**: UPPER_SNAKE_CASE (例: `MAX_RETRY_COUNT`, `API_BASE_URL`)
- **ファイル名**: kebab-case (例: `user-service.ts`, `login-form.tsx`)

### 2. コメント規約
```typescript
/**
 * 関数の説明
 * @param {type} paramName - パラメータの説明
 * @returns {type} 戻り値の説明
 * @example
 * const result = functionName(param);
 */
function functionName(paramName: type): returnType {
  // 実装の詳細説明（必要に応じて）
  return result;
}
```

### 3. インポート順序
```typescript
// 1. 外部ライブラリ
import React from 'react';
import axios from 'axios';

// 2. 内部ライブラリ・ユーティリティ
import { utils } from '@/lib/utils';
import { config } from '@/config';

// 3. 相対インポート
import './component.css';
import { LocalComponent } from './LocalComponent';
```

## 🔧 開発フロー

### 1. ブランチ戦略
- **main**: 本番環境用（常に安定）
- **develop**: 開発統合用
- **feature/[機能名]**: 機能開発用
- **hotfix/[修正内容]**: 緊急修正用

### 2. コミットメッセージ
```
type(scope): subject

body

footer
```

**タイプ例:**
- `feat`: 新機能
- `fix`: バグ修正
- `docs`: ドキュメント
- `style`: フォーマット
- `refactor`: リファクタリング
- `test`: テスト追加・修正

### 3. プルリクエスト
- **タイトル**: 変更内容を簡潔に記述
- **説明**: 変更理由と影響範囲を明記
- **チェックリスト**: テスト実行、ドキュメント更新確認
- **レビュー**: 最低1名の承認が必要

## 🧪 品質管理

### 1. テスト要件
- **単体テスト**: 適切なカバレッジ以上
- **統合テスト**: 主要フローの検証
- **E2Eテスト**: ユーザーシナリオの検証

### 2. コードレビュー観点
- **機能性**: 要件を満たしているか
- **可読性**: 理解しやすいコードか
- **保守性**: 変更・拡張しやすいか
- **パフォーマンス**: 性能に問題はないか
- **セキュリティ**: 脆弱性はないか

### 3. 定期的な改善
- **週次**: コードレビュー振り返り
- **月次**: 技術的負債の見直し
- **四半期**: 開発プロセスの改善

## 📚 ドキュメント管理

### 1. 必須ドキュメント
- **README.md**: プロジェクト概要・セットアップ手順
- **API仕様書**: エンドポイント・パラメータ・レスポンス
- **アーキテクチャ図**: システム構成・データフロー
- **運用手順書**: デプロイ・監視・障害対応

### 2. 更新ルール
- **機能追加時**: 関連ドキュメントの同時更新
- **仕様変更時**: 影響範囲の文書化
- **リリース時**: 変更履歴の記録

## 🚀 パフォーマンス基準

### 1. フロントエンド
- **初期表示**: 3秒以内
- **ページ遷移**: 1秒以内
- **API応答**: 500ms以内

### 2. バックエンド
- **API応答時間**: 200ms以内（平均）
- **データベースクエリ**: 100ms以内
- **メモリ使用量**: 制限値以下での運用

## 🔒 セキュリティ基準

### 1. 認証・認可
- **パスワード**: 最低8文字、複雑性要件
- **セッション**: 適切なタイムアウト設定
- **API**: 適切な認証・認可の実装

### 2. データ保護
- **個人情報**: 暗号化・マスキング
- **ログ**: 機密情報の除外
- **通信**: HTTPS/TLS必須

## 📊 効果測定

### 開発効率指標
- **バグ発生率**: 削減を目標
- **修正時間**: 短縮を目標
- **新機能開発速度**: 向上を目標

### 品質指標
- **コードレビュー時間**: 短縮を目標
- **テストカバレッジ**: 適切なレベル以上維持
- **技術的負債**: 定期的な削減


