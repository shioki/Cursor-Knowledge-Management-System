---
description: 
globs: 
alwaysApply: false
---
# デバッグワークフロー管理

## 🔍 デバッグプロセス

### 1. 問題の特定・記録
```markdown
## 問題概要
- **発生日時**: [YYYY-MM-DD HH:MM]
- **環境**: [開発/ステージング/本番]
- **影響範囲**: [機能/ユーザー範囲]
- **緊急度**: [高/中/低]

## 症状
- **エラーメッセージ**: 
- **再現手順**: 
- **期待動作**: 
- **実際の動作**: 
```

### 2. 調査・分析
- **ログ確認**: @.cursor/debug/temp-logs/ に関連ログを保存
- **過去事例検索**: @.cursor/debug/sessions/ で類似問題を検索
- **関連知識参照**: @.cursor/knowledge.md で技術情報を確認

### 3. 解決策の実装
- **仮説立案**: 原因の仮説を複数立てる
- **検証実装**: 最小限の変更で検証
- **テスト実行**: 影響範囲を考慮したテスト

### 4. 記録・共有
- **解決記録**: .cursor/debug/sessions/YYYY-MM-DD_問題名.md に保存
- **知識更新**: .cursor/knowledge.md に技術的学習を追加
- **改善提案**: .cursor/improvements.md に予防策を記録

## 📁 ファイル管理ルール

### セッション記録形式
```
.cursor/debug/sessions/
├── 2024-01-15_login-error.md
├── 2024-01-20_performance-issue.md
└── 2024-01-25_deployment-failure.md
```

### 一時ログ管理
```
.cursor/debug/temp-logs/
├── error-2024-01-15.log
├── performance-2024-01-20.log
└── network-2024-01-25.log
```

## 🚨 緊急時対応

### 重大バグ対応
1. **即座に記録**: .cursor/debug/sessions/ に緊急セッション作成
2. **過去事例確認**: 類似問題の解決策を検索
3. **暫定対応**: 最小限の修正で影響を軽減
4. **根本対応**: 原因を特定して恒久的解決

### エスカレーション基準
- **1時間以内に解決できない**: チームに相談
- **システム全体に影響**: 即座にエスカレーション
- **データ損失の可能性**: 最優先で対応

## 📊 効果測定
- **平均解決時間**: 40%短縮目標
- **再発率**: 70%削減目標
- **知識共有率**: 90%以上維持

